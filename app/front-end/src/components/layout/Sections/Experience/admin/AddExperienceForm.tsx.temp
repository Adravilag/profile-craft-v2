// admin/AddEducationForm.tsx

import React, { useState } from 'react';
import { education as educationApi } from '@/services/endpoints';
import { useNotification } from '@/hooks/useNotification';
import type { Education } from '@/types/api';
import styles from './AddExperienceForm.module.css';

interface AddEducationFormProps {
  editingEducation?: Education;
  onSave: () => void;
  onCancel: () => void;
  initialData?: Partial<Education>;
  isEditing?: boolean;
  onSubmit?: (data: Education) => Promise<void>;
  formRef?: React.RefObject<HTMLFormElement | null>;
  useExternalFooter?: boolean;
  useModalShell?: boolean; // Indica si se está usando dentro de ModalShell
  // Callbacks para comunicación con ModalShell
  onFormDataChange?: (data: Education) => void;
  onValidationErrorsChange?: (errors: any) => void;
}

const AddEducationForm: React.FC<AddEducationFormProps> = ({
  editingEducation,
  onSave,
  onCancel,
  initialData,
  isEditing = false,
  onSubmit,
  formRef,
  useExternalFooter = false,
  useModalShell = false,
  onFormDataChange,
  onValidationErrorsChange,
}) => {
  const { showSuccess, showError } = useNotification();
  const [isLoading, setIsLoading] = useState(false);
  
  const [formData, setFormData] = useState({
    role: initialData?.title || editingEducation?.title || '',
    company: initialData?.institution || editingEducation?.institution || '',
    start_date: initialData?.start_date || editingEducation?.start_date || '',
    end_date: initialData?.end_date || editingEducation?.end_date || '',
    description: initialData?.description || editingEducation?.description || '',
    is_current: false, // Asumiendo que no está en el modelo inicial
    // Campos de educación que ya no se usan directamente en el form, pero se mantienen por si acaso
    grade: initialData?.grade || editingEducation?.grade || '',
    order_index: initialData?.order_index || editingEducation?.order_index || 0,
  });

  // Comunicación con ModalShell para el progreso
  React.useEffect(() => {
    if (useModalShell && onFormDataChange) {
      // @ts-ignore
      onFormDataChange(formData);
    }
  }, [formData, useModalShell, onFormDataChange]);

  React.useEffect(() => {
    if (useModalShell && onValidationErrorsChange) {
      // Validaciones básicas para educación
      const errors: any = {};
      if (!formData.role.trim()) errors.title = 'Título es requerido';
      if (!formData.company.trim()) errors.institution = 'Institución es requerida';
      if (!formData.start_date.trim()) errors.start_date = 'Fecha de inicio es requerida';
      
      onValidationErrorsChange(errors);
    }
  }, [formData, useModalShell, onValidationErrorsChange]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const educationData = {
        title: formData.role,
        institution: formData.company,
        start_date: formData.start_date,
        end_date: formData.is_current ? '' : formData.end_date,
        description: formData.description,
        grade: formData.grade,
        order_index: formData.order_index,
        user_id: 1, // Por ahora fijo
      };

      if (editingEducation?._id) {
        const id = editingEducation._id || editingEducation.id;
        await educationApi.updateEducation(parseInt(id?.toString() || '0'), educationData);
        showSuccess('Educación Actualizada', 'Se ha actualizado la educación correctamente');
      } else {
        await educationApi.createEducation(educationData);
        showSuccess('Nueva Educación', 'Se ha creado la educación correctamente');
      }

      // Disparar evento para refrescar datos
      window.dispatchEvent(new CustomEvent('education-changed'));
      onSave();
    } catch (error) {
      console.error('Error al guardar educación:', error);
      showError('Error', 'No se pudo guardar la educación');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form ref={formRef} onSubmit={handleSubmit} className={styles.form || ''}>
      {/* Información básica */}
      <div className={styles.formSection}>
        <h3 className={styles.sectionTitle}>
          <i className="fas fa-briefcase"></i>
          Información Básica
        </h3>
        
        <div className={styles.formGrid}>
          {/* Título del puesto */}
          <div className={styles.formField}>
            <label 
              htmlFor="role"
              className={styles.label}
            >
              <i className="fas fa-user-tie"></i>
              Título del puesto *
            </label>
            <input
              type="text"
              id="role"
              value={formData.role}
              onChange={(e) => setFormData({ ...formData, role: e.target.value })}
              required
              className={`${styles.input} ${
                !formData.role ? styles.invalid : ''
              }`}
              placeholder="Ej: Desarrollador Full Stack Senior"
            />
            <div className={styles.helperText}>
              Especifica tu rol o cargo principal
            </div>
            {!formData.role && (
              <div className={styles.errorText}>
                El título del puesto es obligatorio
              </div>
            )}
          </div>

          {/* Empresa */}
          <div className={styles.formField}>
            <label 
              htmlFor="company"
              className={styles.label}
            >
              <i className="fas fa-building"></i>
              Empresa *
            </label>
            <input
              type="text"
              id="company"
              value={formData.company}
              onChange={(e) => setFormData({ ...formData, company: e.target.value })}
              required
              className={`${styles.input} ${
                !formData.company ? styles.invalid : ''
              }`}
              placeholder="Ej: ISOTROL"
            />
            <div className={styles.helperText}>
              Nombre de la empresa u organización
            </div>
            {!formData.company && (
              <div className={styles.errorText}>
                La empresa es obligatoria
              </div>
            )}
          </div>
        </div>

              {/* Fechas */}
        <div className={styles.formGrid}>
          <div className={styles.formField}>
            <label 
              htmlFor="start_date"
              className={styles.label}
            >
              <i className="fas fa-calendar-alt"></i>
              Fecha de Inicio *
            </label>
            <input
              type="month"
              id="start_date"
              value={formData.start_date}
              onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}
              required
              className={`${styles.input} ${
                !formData.start_date ? styles.invalid : ''
              }`}
            />
            <div className={styles.helperText}>
              Mes y año de inicio
            </div>
            {!formData.start_date && (
              <div className={styles.errorText}>
                La fecha de inicio es obligatoria
              </div>
            )}
          </div>

          <div className={styles.formField}>
            <label 
              htmlFor="end_date"
              className={styles.label}
            >
              <i className="fas fa-calendar-check"></i>
              Fecha de fin
            </label>
            <input
              type="month"
              id="end_date"
              value={formData.end_date}
              onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}
              disabled={formData.is_current}
              className={styles.input}
            />
            <div className={styles.helperText}>
              Mes y año de fin o déjalo vacío
            </div>
          </div>
        </div>
        <div className={styles.formField}>
            <label className={styles.checkboxLabel}>
              <input
                type="checkbox"
                checked={formData.is_current}
                onChange={(e) => setFormData({ ...formData, is_current: e.target.checked, end_date: e.target.checked ? '' : formData.end_date })}
              />
              Trabajo actual
            </label>
        </div>

        {/* Descripción */}
        <div className={styles.formField}>
          <label 
            htmlFor="description"
            className={styles.label}
          >
            <i className="fas fa-align-left"></i>
            Descripción
          </label>
          <textarea
            id="description"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            rows={4}
            placeholder="Descripción de tus responsabilidades, logros, proyectos relevantes..."
            className={styles.textarea}
          />
          <div className={styles.helperText}>
            Información adicional sobre tu experiencia laboral, logros, etc.
          </div>
        </div>

        {/* Otros campos */}
        <div className={styles.formGrid}>
          <div className={styles.formField}>
            <label 
              htmlFor="grade"
              className={styles.label}
            >
              <i className="fas fa-star"></i>
              Calificación/Nota
            </label>
            <input
              type="text"
              id="grade"
              value={formData.grade}
              onChange={(e) => setFormData({ ...formData, grade: e.target.value })}
              placeholder="Ej: Cum Laude, 9.2/10, etc."
              className={styles.input}
            />
            <div className={styles.helperText}>
              Calificación final, mención honorífica, etc.
            </div>
          </div>

          <div className={styles.formField}>
            <label 
              htmlFor="order_index"
              className={styles.label}
            >
              <i className="fas fa-sort-numeric-down"></i>
              Orden de visualización
            </label>
            <input
              type="number"
              id="order_index"
              value={formData.order_index}
              onChange={(e) => setFormData({ ...formData, order_index: parseInt(e.target.value) || 0 })}
              className={styles.input}
              min="0"
            />
            <div className={styles.helperText}>
              Número para ordenar la educación en el CV
            </div>
          </div>
        </div>
      </div>

      {/* Botones si no usa ModalShell */}
      {!useModalShell && !useExternalFooter && (
        <div className={styles.formActions}>
          <button
            type="button"
            onClick={onCancel}
            disabled={isLoading}
            className={styles.cancelButton}
          >
            Cancelar
          </button>
          <button
            type="submit"
            disabled={isLoading}
            className={styles.submitButton}
          >
            {isLoading ? 'Guardando...' : editingEducation ? 'Actualizar' : 'Crear'}
          </button>
        </div>
      )}
    </form>
  );
};

export default AddEducationForm;
