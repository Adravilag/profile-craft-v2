diff --git a/node_modules/lint-staged/README.md b/node_modules/lint-staged/README.md
index 95b85a0..a6fda25 100644
--- a/node_modules/lint-staged/README.md
+++ b/node_modules/lint-staged/README.md
@@ -4,7 +4,7 @@
 
 ---
 
-Run linters against staged git files and don't let :poop: slip into your code base!
+Run tasks like formatters and linters against staged git files and don't let :poop: slip into your code base!
 
 ```bash
 npm install --save-dev lint-staged # requires further setup
@@ -13,7 +13,7 @@ npm install --save-dev lint-staged # requires further setup
 ```
 $ git commit
 
-✔ Preparing lint-staged...
+✔ Backed up original state in git stash (5bda95f)
 ❯ Running tasks for staged files...
   ❯ packages/frontend/.lintstagedrc.json — 1 file
     ↓ *.js — no files [SKIPPED]
@@ -36,7 +36,7 @@ $ git commit
 
 ## Why
 
-Linting makes more sense when run before committing your code. By doing so you can ensure no errors go into the repository and enforce code style. But running a lint process on a whole project is slow, and linting results can be irrelevant. Ultimately you only want to lint files that will be committed.
+Code quality tasks like formatters and linters make more sense when run before committing your code. By doing so you can ensure no errors go into the repository and enforce code style. But running a task on a whole project can be slow, and opinionated tasks such as linting can sometimes produce irrelevant results. Ultimately you only want to check files that will be committed.
 
 This project contains a script that will run arbitrary shell tasks with a list of staged files as an argument, filtered by a specified glob pattern.
 
@@ -59,8 +59,8 @@ To install _lint-staged_ in the recommended way, you need to:
 1. Set up the `pre-commit` git hook to run _lint-staged_
    - [Husky](https://github.com/typicode/husky) is a popular choice for configuring git hooks
    - Read more about git hooks [here](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)
-1. Install some linters, like [ESLint](https://eslint.org) or [Prettier](https://prettier.io)
-1. Configure _lint-staged_ to run linters and other tasks:
+1. Install some tools like [ESLint](https://eslint.org) or [Prettier](https://prettier.io)
+1. Configure _lint-staged_ to run code checkers and other tasks:
    - for example: `{ "*.js": "eslint" }` to run ESLint for all staged JS files
    - See [Configuration](#configuration) for more info
 
@@ -70,6 +70,9 @@ Now change a few files, `git add` or `git add --patch` some of them to your comm
 
 See [examples](#examples) and [configuration](#configuration) for more information.
 
+> [!CAUTION]  
+> _Lint-staged_ runs `git` operations affecting the files in your repository. By default _lint-staged_ creates a `git stash` as a backup of the original state before running any configured tasks to help prevent data loss.
+
 ## Changelog
 
 See [Releases](https://github.com/okonet/lint-staged/releases).
@@ -117,9 +120,10 @@ Options:
   -c, --config [path]                path to configuration file, or - to read from stdin
   --cwd [path]                       run all tasks in specific directory, instead of the current
   -d, --debug                        print additional debug information (default: false)
-  --diff [string]                    override the default "--staged" flag of "git diff" to get list of files. Implies
-                                     "--no-stash".
-  --diff-filter [string]             override the default "--diff-filter=ACMR" flag of "git diff" to get list of files
+  --diff [string]                    override the default "--staged" flag of "git diff" to get list of files.
+                                     Implies "--no-stash".
+  --diff-filter [string]             override the default "--diff-filter=ACMR" flag of "git diff" to get list of
+                                     files
   --max-arg-length [number]          maximum length of the command-line argument string (default: 0)
   --no-stash                         disable the backup stash, and do not revert in case of errors. Implies
                                      "--no-hide-partially-staged".
@@ -127,12 +131,18 @@ Options:
   -q, --quiet                        disable lint-staged’s own console output (default: false)
   -r, --relative                     pass relative filepaths to tasks (default: false)
   -x, --shell [path]                 skip parsing of tasks for better shell support (default: false)
-  -v, --verbose                      show task output even when tasks succeed; by default only failed output is shown
-                                     (default: false)
+  -v, --verbose                      show task output even when tasks succeed; by default only failed output is
+                                     shown (default: false)
   -h, --help                         display help for command
+
+Any lost modifications can be restored from a git stash:
+
+  > git stash list
+  stash@{0}: automatic lint-staged backup
+  > git stash apply --index stash@{0}
 ```
 
-- **`--allow-empty`**: By default, when linter tasks undo all staged changes, lint-staged will exit with an error and abort the commit. Use this flag to allow creating empty git commits.
+- **`--allow-empty`**: By default, when tasks undo all staged changes, lint-staged will exit with an error and abort the commit. Use this flag to allow creating empty git commits.
 - **`--concurrent [number|boolean]`**: Controls the [concurrency of tasks](#task-concurrency) being run by lint-staged. **NOTE**: This does NOT affect the concurrency of subtasks (they will always be run sequentially). Possible values are:
   - `false`: Run all tasks serially
   - `true` (default) : _Infinite_ concurrency. Runs as many tasks in parallel as possible.
@@ -143,14 +153,14 @@ Options:
   - uses [debug](https://github.com/visionmedia/debug) internally to log additional information about staged files, commands being executed, location of binaries, etc. Debug logs, which are automatically enabled by passing the flag, can also be enabled by setting the environment variable `$DEBUG` to `lint-staged*`.
   - uses [`verbose` renderer](https://listr2.kilic.dev/renderers/verbose-renderer/) for `listr2`; this causes serial, uncoloured output to the terminal, instead of the default (beautified, dynamic) output.
     (the [`verbose` renderer](https://listr2.kilic.dev/renderers/verbose-renderer/) can also be activated by setting the `TERM=dumb` or `NODE_ENV=test` environment variables)
-- **`--diff`**: By default linters are filtered against all files staged in git, generated from `git diff --staged`. This option allows you to override the `--staged` flag with arbitrary revisions. For example to get a list of changed files between two branches, use `--diff="branch1...branch2"`. You can also read more from about [git diff](https://git-scm.com/docs/git-diff) and [gitrevisions](https://git-scm.com/docs/gitrevisions). This option also implies `--no-stash`.
+- **`--diff`**: By default tasks are filtered against all files staged in git, generated from `git diff --staged`. This option allows you to override the `--staged` flag with arbitrary revisions. For example to get a list of changed files between two branches, use `--diff="branch1...branch2"`. You can also read more from about [git diff](https://git-scm.com/docs/git-diff) and [gitrevisions](https://git-scm.com/docs/gitrevisions). This option also implies `--no-stash`.
 - **`--diff-filter`**: By default only files that are _added_, _copied_, _modified_, or _renamed_ are included. Use this flag to override the default `ACMR` value with something else: _added_ (`A`), _copied_ (`C`), _deleted_ (`D`), _modified_ (`M`), _renamed_ (`R`), _type changed_ (`T`), _unmerged_ (`U`), _unknown_ (`X`), or _pairing broken_ (`B`). See also the `git diff` docs for [--diff-filter](https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---diff-filterACDMRTUXB82308203).
 - **`--max-arg-length`**: long commands (a lot of files) are automatically split into multiple chunks when it detects the current shell cannot handle them. Use this flag to override the maximum length of the generated command string.
 - **`--no-stash`**: By default a backup stash will be created before running the tasks, and all task modifications will be reverted in case of an error. This option will disable creating the stash, and instead leave all modifications in the index when aborting the commit. Can be re-enabled with `--stash`. This option also implies `--no-hide-partially-staged`.
 - **`--no-hide-partially-staged`**: By default, unstaged changes from partially staged files will be hidden. This option will disable this behavior and include all unstaged changes in partially staged files. Can be re-enabled with `--hide-partially-staged`
 - **`--quiet`**: Supress all CLI output, except from tasks.
 - **`--relative`**: Pass filepaths relative to `process.cwd()` (where `lint-staged` runs) to tasks. Default is `false`.
-- **`--shell`**: By default linter commands will be parsed for speed and security. This has the side-effect that regular shell scripts might not work as expected. You can skip parsing of commands with this option. To use a specific shell, use a path like `--shell "/bin/bash"`.
+- **`--shell`**: By default task commands will be parsed for speed and security. This has the side-effect that regular shell scripts might not work as expected. You can skip parsing of commands with this option. To use a specific shell, use a path like `--shell "/bin/bash"`.
 - **`--verbose`**: Show task output even when tasks succeed. By default only failed output is shown.
 
 ## Configuration
@@ -198,6 +208,28 @@ So, considering you did `git add file1.ext file2.ext`, lint-staged will run the
 
 `your-cmd file1.ext file2.ext`
 
+### TypeScript
+
+_Lint-staged_ provides TypeScript types for the configuration and main Node.js API. You can use the JSDoc syntax in your JS configuration files:
+
+```js
+/**
+ * @filename: lint-staged.config.js
+ * @type {import('lint-staged').Configuration}
+ */
+export default {
+  '*': 'prettier --write',
+}
+```
+
+It's also possible to use the `.ts` file extension for the configuration if your Node.js version supports it. The `--experimental-strip-types` flag was introduced in [Node.js v22.6.0](https://github.com/nodejs/node/releases/tag/v22.6.0) and unflagged in [v23.6.0](https://github.com/nodejs/node/releases/tag/v23.6.0), enabling Node.js to execute TypeScript files without additional configuration.
+
+```shell
+export NODE_OPTIONS="--experimental-strip-types"
+
+npx lint-staged --config lint-staged.config.ts
+```
+
 ### Task concurrency
 
 By default _lint-staged_ will run configured tasks concurrently. This means that for every glob, all the commands will be started at the same time. With the following config, both `eslint` and `prettier` will run at the same time:
@@ -250,7 +282,7 @@ Or, if necessary, you can limit the concurrency using `--concurrent <number>` or
 
 ## Filtering files
 
-Linter commands work on a subset of all staged files, defined by a _glob pattern_. lint-staged uses [micromatch](https://github.com/micromatch/micromatch) for matching files with the following rules:
+Task commands work on a subset of all staged files, defined by a _glob pattern_. lint-staged uses [micromatch](https://github.com/micromatch/micromatch) for matching files with the following rules:
 
 - If the glob pattern contains no slashes (`/`), micromatch's `matchBase` option will be enabled, so globs match a file's basename regardless of directory:
   - `"*.js"` will match all JS files, like `/test.js` and `/foo/bar/test.js`
@@ -265,9 +297,9 @@ When matching, lint-staged will do the following
 - Resolve the git root automatically, no configuration needed.
 - Pick the staged files which are present inside the project directory.
 - Filter them using the specified glob patterns.
-- Pass absolute paths to the linters as arguments.
+- Pass absolute paths to the tasks as arguments.
 
-**NOTE:** `lint-staged` will pass _absolute_ paths to the linters to avoid any confusion in case they're executed in a different working directory (i.e. when your `.git` directory isn't the same as your `package.json` directory).
+**NOTE:** `lint-staged` will pass _absolute_ paths to the tasks to avoid any confusion in case they're executed in a different working directory (i.e. when your `.git` directory isn't the same as your `package.json` directory).
 
 Also see [How to use `lint-staged` in a multi-package monorepo?](#how-to-use-lint-staged-in-a-multi-package-monorepo)
 
@@ -557,12 +589,12 @@ The following is equivalent:
 
 </details>
 
-### Use environment variables with linting commands
+### Use environment variables with task commands
 
 <details>
   <summary>Click to expand</summary>
 
-Linting commands _do not_ support the shell convention of expanding environment variables. To enable the convention yourself, use a tool like [`cross-env`](https://github.com/kentcdodds/cross-env).
+Task commands _do not_ support the shell convention of expanding environment variables. To enable the convention yourself, use a tool like [`cross-env`](https://github.com/kentcdodds/cross-env).
 
 For example, here is `jest` running on all `.js` files with the `NODE_ENV` variable being set to `"test"`:
 
@@ -817,7 +849,7 @@ _Thanks to [this comment](https://youtrack.jetbrains.com/issue/IDEA-135454#comme
 <details>
   <summary>Click to expand</summary>
 
-Install _lint-staged_ on the monorepo root level, and add separate configuration files in each package. When running, _lint-staged_ will always use the configuration closest to a staged file, so having separate configuration files makes sure linters do not "leak" into other packages.
+Install _lint-staged_ on the monorepo root level, and add separate configuration files in each package. When running, _lint-staged_ will always use the configuration closest to a staged file, so having separate configuration files makes sure tasks do not "leak" into other packages.
 
 For example, in a monorepo with `packages/frontend/.lintstagedrc.json` and `packages/backend/.lintstagedrc.json`, a staged file inside `packages/frontend/` will only match that configuration, and not the one in `packages/backend/`.
 
@@ -844,7 +876,7 @@ export default {
 }
 ```
 
-To support backwards-compatibility, monorepo features require multiple _lint-staged_ configuration files present in the git repo. If you still want to run _lint-staged_ in only one of the packages in a monorepo, you can either add an "empty" _lint-staged_ configuration to the root of the repo (so that there's two configs in total), or alternatively run _lint-staged_ with the `--cwd` option pointing to your package directory (for example, `lint-staged --cwd packages/frontend`).
+To support backwards-compatibility, monorepo features require multiple _lint-staged_ configuration files present in the git repo. If you still want to run _lint-staged_ in only one of the packages in a monorepo, you can use the `--cwd` option (for example, `lint-staged --cwd packages/frontend`).
 
 </details>
 
@@ -855,7 +887,7 @@ To support backwards-compatibility, monorepo features require multiple _lint-sta
 
 tl;dr: Yes, but the pattern should start with `../`.
 
-By default, `lint-staged` executes linters only on the files present inside the project folder(where `lint-staged` is installed and run from).
+By default, `lint-staged` executes tasks only on the files present inside the project folder(where `lint-staged` is installed and run from).
 So this question is relevant _only_ when the project folder is a child folder inside the git repo.
 In certain project setups, it might be desirable to bypass this restriction. See [#425](https://github.com/okonet/lint-staged/issues/425), [#487](https://github.com/okonet/lint-staged/issues/487) for more context.
 
@@ -877,15 +909,15 @@ all changed files between two different branches. If you want to run _lint-stage
 Try out the `git diff` command until you are satisfied with the result, for example:
 
 ```
-git diff --diff-filter=ACMR --name-only master...my-branch
+git diff --diff-filter=ACMR --name-only main...my-branch
 ```
 
-This will print a list of _added_, _changed_, _modified_, and _renamed_ files between `master` and `my-branch`.
+This will print a list of _added_, _changed_, _modified_, and _renamed_ files between `main` and `my-branch`.
 
 You can then run lint-staged against the same files with:
 
 ```
-npx lint-staged --diff="master...my-branch"
+npx lint-staged --diff="main...my-branch"
 ```
 
 </details>
@@ -981,3 +1013,98 @@ ESLint v8.51.0 introduced [`--no-warn-ignored` CLI flag](https://eslint.org/docs
 </details>
 
 </details>
+
+### How can I resolve TypeScript (`tsc`) ignoring `tsconfig.json` when `lint-staged` runs via Husky hooks?
+
+<details>
+  <summary>Click to expand</summary>
+
+When running `lint-staged` via Husky hooks, TypeScript may ignore `tsconfig.json`, leading to errors like:
+
+> **TS17004:** Cannot use JSX unless the '--jsx' flag is provided.  
+> **TS1056:** Accessors are only available when targeting ECMAScript 5 and higher.  
+
+See issue [#825](https://github.com/okonet/lint-staged/issues/825) for more details.  
+
+#### Root Cause  
+
+<details>
+  <summary>Click to expand</summary>
+
+1. `lint-staged` automatically passes matched staged files as arguments to commands.  
+2. Certain input files can cause TypeScript to ignore `tsconfig.json`. For more details, see this TypeScript issue: [Allow tsconfig.json when input files are specified](https://github.com/microsoft/TypeScript/issues/27379).  
+
+</details>  
+
+#### Workaround 1: Use a [function signature](https://github.com/lint-staged/lint-staged?tab=readme-ov-file#example-run-tsc-on-changes-to-typescript-files-but-do-not-pass-any-filename-arguments) for the `tsc` command
+
+<details>
+  <summary>Click to expand</summary>
+
+As suggested by @antoinerousseau in [#825 (comment)](https://github.com/lint-staged/lint-staged/issues/825#issuecomment-620018284), using a function prevents `lint-staged` from appending file arguments:  
+
+**Before:**
+
+```js
+// package.json
+
+"lint-staged": {
+    "*.{ts,tsx}":[
+      "tsc --noEmit",
+      "prettier --write"
+    ]
+  }
+```
+
+**After:**
+
+```js
+// lint-staged.config.js
+module.exports = {
+  "*.{ts,tsx}": [
+    () => "tsc --noEmit", 
+    "prettier --write"
+  ],
+}
+```
+
+</details>
+
+#### Workaround 2: Take the `sh` or `bash` to wrap the `tsc` command
+
+<details>
+  <summary>Click to expand</summary>
+
+As suggested by @sombreroEnPuntas in [#825 (comment)](https://github.com/lint-staged/lint-staged/issues/825#issuecomment-674575655), wrapping `tsc` in a shell command prevents `lint-staged` from modifying its arguments:
+
+**Before:**
+
+```js
+// package.json
+
+"lint-staged": {
+  "*.{ts,tsx}":[
+    "tsc --noEmit",
+    "prettier --write"
+  ]
+}
+```
+
+**After:**
+
+```js
+// package.json
+
+"lint-staged": {
+  "*.{ts,tsx}":[
+    "bash -c 'tsc --noEmit'"
+    "prettier --write"
+  ]
+}
+```
+
+**Note:** This approach may have cross-platform compatibility issues.
+
+</details>
+
+</details>
diff --git a/node_modules/lint-staged/bin/lint-staged.js b/node_modules/lint-staged/bin/lint-staged.js
index 0ae0b34..6f2a79c 100644
--- a/node_modules/lint-staged/bin/lint-staged.js
+++ b/node_modules/lint-staged/bin/lint-staged.js
@@ -1,14 +1,16 @@
 #!/usr/bin/env node
 
-import fs from 'node:fs/promises'
+import { userInfo } from 'node:os'
 
-import { supportsColor } from 'chalk'
+import chalkPkg from 'chalk'
+const { supportsColor } = chalkPkg;
 import { Option, program } from 'commander'
 import debug from 'debug'
 
 import lintStaged from '../lib/index.js'
-import { CONFIG_STDIN_ERROR } from '../lib/messages.js'
+import { CONFIG_STDIN_ERROR, RESTORE_STASH_EXAMPLE } from '../lib/messages.js'
 import { readStdin } from '../lib/readStdin.js'
+import { getVersion } from '../lib/version.js'
 
 // Force colors for packages that depend on https://www.npmjs.com/package/supports-color
 if (supportsColor) {
@@ -20,45 +22,51 @@ const debugLog = debug('lint-staged:bin')
 // Do not terminate main Listr process on SIGINT
 process.on('SIGINT', () => {})
 
-const packageJson = JSON.parse(await fs.readFile(new URL('../package.json', import.meta.url)))
-const version = packageJson.version
+program.version(await getVersion())
 
-const cli = program.version(version)
+/**
+ * This shouldn't be necessary for lint-staged, but add migration step just in case
+ * to preserve old behavior of "commander".
+ *
+ * @todo remove this in the major version
+ * @see https://github.com/tj/commander.js/releases/tag/v13.0.0
+ * */
+program.allowExcessArguments()
 
-cli.option('--allow-empty', 'allow empty commits when tasks revert all staged changes', false)
+program.option('--allow-empty', 'allow empty commits when tasks revert all staged changes', false)
 
-cli.option(
+program.option(
   '-p, --concurrent <number|boolean>',
   'the number of tasks to run concurrently, or false for serial',
   true
 )
 
-cli.option('-c, --config [path]', 'path to configuration file, or - to read from stdin')
+program.option('-c, --config [path]', 'path to configuration file, or - to read from stdin')
 
-cli.option('--cwd [path]', 'run all tasks in specific directory, instead of the current')
+program.option('--cwd [path]', 'run all tasks in specific directory, instead of the current')
 
-cli.option('-d, --debug', 'print additional debug information', false)
+program.option('-d, --debug', 'print additional debug information', false)
 
-cli.addOption(
+program.addOption(
   new Option(
     '--diff [string]',
     'override the default "--staged" flag of "git diff" to get list of files. Implies "--no-stash".'
   ).implies({ stash: false })
 )
 
-cli.option(
+program.option(
   '--diff-filter [string]',
   'override the default "--diff-filter=ACMR" flag of "git diff" to get list of files'
 )
 
-cli.option('--max-arg-length [number]', 'maximum length of the command-line argument string', 0)
+program.option('--max-arg-length [number]', 'maximum length of the command-line argument string', 0)
 
 /**
  * We don't want to show the `--stash` flag because it's on by default, and only show the
  * negatable flag `--no-stash` in stead. There seems to be a bug in Commander.js where
  * configuring only the latter won't actually set the default value.
  */
-cli
+program
   .addOption(
     new Option('--stash', 'enable the backup stash, and revert in case of errors')
       .default(true)
@@ -78,7 +86,7 @@ cli
  * negatable flag `--no-hide-partially-staged` in stead. There seems to be a bug in Commander.js where
  * configuring only the latter won't actually set the default value.
  */
-cli
+program
   .addOption(
     new Option('--hide-partially-staged', 'hide unstaged changes from partially staged files')
       .default(true)
@@ -91,26 +99,26 @@ cli
     ).default(false)
   )
 
-cli.option('-q, --quiet', 'disable lint-staged’s own console output', false)
+program.option('-q, --quiet', 'disable lint-staged’s own console output', false)
 
-cli.option('-r, --relative', 'pass relative filepaths to tasks', false)
+program.option('-r, --relative', 'pass relative filepaths to tasks', false)
 
-cli.option('-x, --shell [path]', 'skip parsing of tasks for better shell support', false)
+program.option('-x, --shell [path]', 'skip parsing of tasks for better shell support', false)
 
-cli.option(
+program.option(
   '-v, --verbose',
   'show task output even when tasks succeed; by default only failed output is shown',
   false
 )
 
-const cliOptions = cli.parse(process.argv).opts()
+program.addHelpText('afterAll', '\n' + RESTORE_STASH_EXAMPLE)
+
+const cliOptions = program.parse(process.argv).opts()
 
 if (cliOptions.debug) {
   debug.enable('lint-staged*')
 }
 
-debugLog('Running `lint-staged@%s` on Node.js %s (%s)', version, process.version, process.platform)
-
 const options = {
   allowEmpty: !!cliOptions.allowEmpty,
   concurrent: JSON.parse(cliOptions.concurrent),
@@ -128,6 +136,13 @@ const options = {
   verbose: !!cliOptions.verbose,
 }
 
+try {
+  const { shell } = userInfo()
+  debugLog('Using shell: %s', shell)
+} catch {
+  debugLog('Could not determine current shell')
+}
+
 debugLog('Options parsed from command-line: %o', options)
 
 if (options.configPath === '-') {
diff --git a/node_modules/lint-staged/lib/configFiles.js b/node_modules/lint-staged/lib/configFiles.js
index 158ec04..7f72352 100644
--- a/node_modules/lint-staged/lib/configFiles.js
+++ b/node_modules/lint-staged/lib/configFiles.js
@@ -16,9 +16,15 @@ export const CONFIG_FILE_NAMES = [
   '.lintstagedrc.yaml',
   '.lintstagedrc.yml',
   '.lintstagedrc.mjs',
+  '.lintstagedrc.mts',
   '.lintstagedrc.js',
+  '.lintstagedrc.ts',
   '.lintstagedrc.cjs',
+  '.lintstagedrc.cts',
   'lint-staged.config.mjs',
+  'lint-staged.config.mts',
   'lint-staged.config.js',
+  'lint-staged.config.ts',
   'lint-staged.config.cjs',
+  'lint-staged.config.cts',
 ]
diff --git a/node_modules/lint-staged/lib/getDiffCommand.js b/node_modules/lint-staged/lib/getDiffCommand.js
index 531b6ff..f251022 100644
--- a/node_modules/lint-staged/lib/getDiffCommand.js
+++ b/node_modules/lint-staged/lib/getDiffCommand.js
@@ -1,4 +1,5 @@
-export function getDiffCommand(diff, diffFilter) {
+/** @type {(diff?: string, diffFilter?: string) => string[]} */
+export const getDiffCommand = (diff, diffFilter) => {
   /**
    *  Docs for --diff-filter option:
    * @see https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---diff-filterACDMRTUXB82308203
@@ -12,7 +13,7 @@ export function getDiffCommand(diff, diffFilter) {
    * Docs for -z option:
    * @see https://git-scm.com/docs/git-diff#Documentation/git-diff.txt--z
    */
-  const diffCommand = ['diff', '--name-only', '-z', `--diff-filter=${diffFilterArg}`, ...diffArgs]
+  const diffCommand = ['diff', `--diff-filter=${diffFilterArg}`, ...diffArgs]
 
   return diffCommand
 }
diff --git a/node_modules/lint-staged/lib/getStagedFiles.js b/node_modules/lint-staged/lib/getStagedFiles.js
index 2500efc..74cacde 100644
--- a/node_modules/lint-staged/lib/getStagedFiles.js
+++ b/node_modules/lint-staged/lib/getStagedFiles.js
@@ -7,10 +7,49 @@ import { parseGitZOutput } from './parseGitZOutput.js'
 
 export const getStagedFiles = async ({ cwd = process.cwd(), diff, diffFilter } = {}) => {
   try {
-    const lines = await execGit(getDiffCommand(diff, diffFilter), { cwd })
-    if (!lines) return []
+    /**
+     * With the raw output lines look like:
+     *
+     * :000000 100644 0000000 780ccd3\u0000A\u0000.gitmodules\u0000
+     * :000000 160000 0000000 1bb568e\u0000A\u0000submodule\u0000
+     *
+     * @see https://git-scm.com/docs/git-diff#_raw_output_format
+     */
+    const output = await execGit([...getDiffCommand(diff, diffFilter), '--raw', '-z'], { cwd })
 
-    return parseGitZOutput(lines).map((file) => normalizePath(path.resolve(cwd, file)))
+    if (!output) return []
+
+    /**
+     * Split from all colons and remove the first one, after which lines will look like:
+     *
+     * 000000 100644 0000000 780ccd3 A\u0000.gitmodules\u0000
+     * 000000 160000 0000000 47e5cff A\u0000submodule\u0000
+     *
+     * where '\u0000' is the NUL character from '-z' option. After that we
+     * parse the lines by splitting from NUL, and then split the first
+     * part from space. This yields us enough info both filter out submodule
+     * roots and get the filename.
+     */
+    return output
+      .slice(1)
+      .split('\u0000:')
+      .map(parseGitZOutput)
+      .flatMap(([info, src, dst]) => {
+        const [, dstMode, , , ,] = info.split(' ')
+
+        /**
+         * Filter out submodule root directory. "160000" is the object mode for submodules.
+         * @see https://github.com/git/git/blob/485f5f863615e670fd97ae40af744e14072cfe18/object.h#L114-L120
+         */
+        if (dstMode === '160000') {
+          return []
+        }
+
+        /** "dst" exists when moving files, otherwise it's undefined and only "src" exists */
+        const filename = dst ?? src
+
+        return [normalizePath(path.resolve(cwd, filename))]
+      })
   } catch {
     return null
   }
diff --git a/node_modules/lint-staged/lib/gitWorkflow.js b/node_modules/lint-staged/lib/gitWorkflow.js
index 7bbd4d8..a336955 100644
--- a/node_modules/lint-staged/lib/gitWorkflow.js
+++ b/node_modules/lint-staged/lib/gitWorkflow.js
@@ -98,7 +98,11 @@ export class GitWorkflow {
    */
   async getBackupStash(ctx) {
     const stashes = await this.execGit(['stash', 'list'])
-    const index = stashes.split('\n').findIndex((line) => line.includes(STASH))
+
+    const index = stashes
+      .split('\n')
+      .findIndex((line) => line.includes(STASH) && line.includes(ctx.backupHash))
+
     if (index === -1) {
       ctx.errors.add(GetBackupStashError)
       throw new Error('lint-staged automatic backup is missing!')
@@ -190,9 +194,9 @@ export class GitWorkflow {
   /**
    * Create a diff of partially staged files and backup stash if enabled.
    */
-  async prepare(ctx) {
+  async prepare(ctx, task) {
     try {
-      debugLog('Backing up original state...')
+      debugLog(task.title)
 
       // Get a list of files with bot staged and unstaged changes.
       // Unstaged changes to these files should be hidden before the tasks run.
@@ -223,10 +227,19 @@ export class GitWorkflow {
       // Save stash of all staged files.
       // The `stash create` command creates a dangling commit without removing any files,
       // and `stash store` saves it as an actual stash.
-      const hash = await this.execGit(['stash', 'create'])
-      await this.execGit(['stash', 'store', '--quiet', '--message', STASH, hash])
+      const stashHash = await this.execGit(['stash', 'create'])
+      ctx.backupHash = await this.execGit(['rev-parse', '--short', stashHash])
+      await this.execGit([
+        'stash',
+        'store',
+        '--quiet',
+        '--message',
+        `${STASH} (${ctx.backupHash})`,
+        ctx.backupHash,
+      ])
 
-      debugLog('Done backing up original state!')
+      task.title = `Backed up original state in git stash (${ctx.backupHash})`
+      debugLog(task.title)
     } catch (error) {
       handleError(error, ctx)
     }
@@ -265,7 +278,12 @@ export class GitWorkflow {
 
     debugLog('Done adding task modifications to index!')
 
-    const stagedFilesAfterAdd = await this.execGit(getDiffCommand(this.diff, this.diffFilter))
+    const stagedFilesAfterAdd = await this.execGit([
+      ...getDiffCommand(this.diff, this.diffFilter),
+      '--name-only',
+      '-z',
+    ])
+
     if (!stagedFilesAfterAdd && !this.allowEmpty) {
       // Tasks reverted all staged changes and the commit would be empty
       // Throw error to stop commit unless `--allow-empty` was used
diff --git a/node_modules/lint-staged/lib/index.d.ts b/node_modules/lint-staged/lib/index.d.ts
new file mode 100644
index 0000000..de3537b
--- /dev/null
+++ b/node_modules/lint-staged/lib/index.d.ts
@@ -0,0 +1,99 @@
+type SyncFunctionTask = (stagedFileNames: string[]) => string | string[]
+
+type AsyncFunctionTask = (stagedFileNames: string[]) => Promise<string | string[]>
+
+type FunctionTask = SyncFunctionTask | AsyncFunctionTask
+
+export type Configuration =
+  | Record<string, string | FunctionTask | (string | FunctionTask)[]>
+  | FunctionTask
+
+export type Options = {
+  /**
+   * Allow empty commits when tasks revert all staged changes
+   * @default false
+   */
+  allowEmpty?: boolean
+  /**
+   * The number of tasks to run concurrently, or `false` to run tasks serially
+   * @default true
+   */
+  concurrent?: boolean | number
+  /**
+   * Manual task configuration; disables automatic config file discovery when used
+   */
+  config?: Configuration
+  /**
+   * Path to single configuration file; disables automatic config file discovery when used
+   */
+  configPath?: string
+  /**
+   * Working directory to run all tasks in, defaults to current working directory
+   */
+  cwd?: string
+  /**
+   * Whether or not to enable debug output
+   * @default false
+   */
+  debug?: boolean
+  /**
+   * Override the default `--staged` flag of `git diff` to get list of files.
+   * @warn changing this also implies `stash: false`.
+   * @example HEAD...origin/main
+   */
+  diff?: string
+  /**
+   * Override the default `--diff-filter=ACMR` flag of `git diff` to get list of files
+   * @default "ACMR"
+   */
+  diffFilter?: string
+  /**
+   * Maximum argument string length, by default automatically detected
+   */
+  maxArgLength?: number
+  /**
+   * Disable lint-staged’s own console output
+   * @default false
+   */
+  quiet?: boolean
+  /**
+   * Pass filepaths relative to `CWD` to tasks, instead of absolute
+   * @default false
+   */
+  relative?: boolean
+  /**
+   * Skip parsing of tasks for better shell support
+   * @default false
+   */
+  shell?: boolean
+  /**
+   * Enable the backup stash, and revert in case of errors.
+   * @warn Disabling this also implies `hidePartiallyStaged: false`.
+   * @default true
+   */
+  stash?: boolean
+  /**
+   * Whether to hide unstaged changes from partially staged files before running tasks
+   * @default true
+   */
+  hidePartiallyStaged?: boolean
+  /**
+   * Show task output even when tasks succeed; by default only failed output is shown
+   * @default false
+   */
+  verbose?: boolean
+}
+
+type LogFunction = (...params: any) => void
+
+type Logger = {
+  log: LogFunction
+  warn: LogFunction
+  error: LogFunction
+}
+
+/**
+ * @returns {boolean} `true` when all tasks were successful, `false` when some tasks failed with errors
+ * @throws {Error} when failed to some other errors
+ */
+export default function lintStaged(options: Options, logger?: Logger): Promise<boolean>
diff --git a/node_modules/lint-staged/lib/index.js b/node_modules/lint-staged/lib/index.js
index 9f92d6a..d78ccae 100644
--- a/node_modules/lint-staged/lib/index.js
+++ b/node_modules/lint-staged/lib/index.js
@@ -1,4 +1,4 @@
-import debug from 'debug'
+import debugLib from 'debug'
 
 import { execGit } from './execGit.js'
 import {
@@ -9,6 +9,7 @@ import {
 } from './messages.js'
 import { printTaskOutput } from './printTaskOutput.js'
 import { runAll } from './runAll.js'
+import { cleanupSkipped } from './state.js'
 import {
   ApplyEmptyCommitError,
   ConfigNotFoundError,
@@ -16,8 +17,9 @@ import {
   GitError,
 } from './symbols.js'
 import { validateOptions } from './validateOptions.js'
+import { getVersion } from './version.js'
 
-const debugLog = debug('lint-staged')
+const debugLog = debugLib('lint-staged')
 
 /**
  * Get the maximum length of a command-line argument string based on current platform
@@ -60,7 +62,7 @@ const getMaxArgLength = () => {
  * @param {boolean} [options.verbose] - Show task output even when tasks succeed; by default only failed output is shown
  * @param {Logger} [logger]
  *
- * @returns {Promise<boolean>} Promise of whether the linting passed or failed
+ * @returns {Promise<boolean>} Promise of whether the task passed or failed
  */
 const lintStaged = async (
   {
@@ -83,6 +85,18 @@ const lintStaged = async (
   } = {},
   logger = console
 ) => {
+  // Seemingly enable debug twice (also done in bin), so that it also works when using the Node.js API
+  if (debug) {
+    debugLib.enable('lint-staged*')
+
+    debugLog(
+      'Running `lint-staged@%s` on Node.js %s (%s)',
+      await getVersion(),
+      process.version,
+      process.platform
+    )
+  }
+
   const gitVersion = await execGit(['version', '--build-options'], { cwd })
   debugLog('%s', gitVersion)
 
@@ -123,11 +137,14 @@ const lintStaged = async (
         logger.error(NO_CONFIGURATION)
       } else if (ctx.errors.has(ApplyEmptyCommitError)) {
         logger.warn(PREVENTED_EMPTY_COMMIT)
-      } else if (ctx.errors.has(GitError) && !ctx.errors.has(GetBackupStashError)) {
+      } else if (
+        (ctx.errors.has(GitError) || cleanupSkipped(ctx)) &&
+        !ctx.errors.has(GetBackupStashError)
+      ) {
         logger.error(GIT_ERROR)
         if (ctx.shouldBackup) {
           // No sense to show this if the backup stash itself is missing.
-          logger.error(RESTORE_STASH_EXAMPLE)
+          logger.error(RESTORE_STASH_EXAMPLE + '\n')
         }
       }
 
diff --git a/node_modules/lint-staged/lib/loadConfig.js b/node_modules/lint-staged/lib/loadConfig.js
index 46885d7..1201917 100644
--- a/node_modules/lint-staged/lib/loadConfig.js
+++ b/node_modules/lint-staged/lib/loadConfig.js
@@ -57,19 +57,21 @@ const NO_EXT = 'noExt'
  * assumption is in `cosmiconfig` as well.
  */
 const loaders = {
+  [NO_EXT]: yamlParse,
+  '.cjs': dynamicImport,
+  '.cts': dynamicImport,
   '.js': dynamicImport,
   '.json': jsonParse,
   '.mjs': dynamicImport,
-  '.cjs': dynamicImport,
+  '.mts': dynamicImport,
+  '.ts': dynamicImport,
   '.yaml': yamlParse,
   '.yml': yamlParse,
-  [NO_EXT]: yamlParse,
 }
 
 const readFile = async (filepath) => {
   const absolutePath = path.resolve(filepath)
-  const file = await fs.readFile(absolutePath)
-  return await file.toString()
+  return fs.readFile(absolutePath, 'utf-8')
 }
 
 const loadConfigByExt = async (filepath) => {
diff --git a/node_modules/lint-staged/lib/messages.js b/node_modules/lint-staged/lib/messages.js
index 742f275..0c5dc42 100644
--- a/node_modules/lint-staged/lib/messages.js
+++ b/node_modules/lint-staged/lib/messages.js
@@ -77,12 +77,11 @@ export const PREVENTED_EMPTY_COMMIT = `
   Use the --allow-empty option to continue, or check your task configuration`)}
 `
 
-export const RESTORE_STASH_EXAMPLE = `  Any lost modifications can be restored from a git stash:
+export const RESTORE_STASH_EXAMPLE = `Any lost modifications can be restored from a git stash:
 
-    > git stash list
-    stash@{0}: automatic lint-staged backup
-    > git stash apply --index stash@{0}
-`
+  > git stash list
+  stash@{0}: automatic lint-staged backup
+  > git stash apply --index stash@{0}`
 
 export const CONFIG_STDIN_ERROR = chalk.redBright(`${error} Failed to read config from stdin.`)
 
diff --git a/node_modules/lint-staged/lib/resolveTaskFn.js b/node_modules/lint-staged/lib/resolveTaskFn.js
index bef77d3..471f39b 100644
--- a/node_modules/lint-staged/lib/resolveTaskFn.js
+++ b/node_modules/lint-staged/lib/resolveTaskFn.js
@@ -8,6 +8,11 @@ import { error, info } from './figures.js'
 import { getInitialState } from './state.js'
 import { TaskError } from './symbols.js'
 
+/**
+ * @see https://github.com/sindresorhus/execa/blob/f4b8b3ab601c94d1503f1010822952758dcc6350/lib/command.js#L32-L37
+ */
+const escapeSpaces = (input) => input.replaceAll(' ', '\\ ')
+
 const TASK_ERROR = 'lint-staged:taskError'
 
 const debugLog = debug('lint-staged:resolveTaskFn')
@@ -159,7 +164,10 @@ export const resolveTaskFn = ({
 
   return async (ctx = getInitialState()) => {
     const execaChildProcess = shell
-      ? execaCommand(isFn ? command : `${command} ${files.join(' ')}`, execaOptions)
+      ? execaCommand(
+          isFn ? command : `${command} ${files.map(escapeSpaces).join(' ')}`,
+          execaOptions
+        )
       : execa(cmd, isFn ? args : args.concat(files), execaOptions)
 
     const quitInterruptCheck = interruptExecutionOnError(ctx, execaChildProcess)
diff --git a/node_modules/lint-staged/lib/runAll.js b/node_modules/lint-staged/lib/runAll.js
index 75d01fd..4864241 100644
--- a/node_modules/lint-staged/lib/runAll.js
+++ b/node_modules/lint-staged/lib/runAll.js
@@ -291,8 +291,8 @@ export const runAll = async (
   const runner = new Listr(
     [
       {
-        title: 'Preparing lint-staged...',
-        task: (ctx) => git.prepare(ctx),
+        title: ctx.shouldBackup ? 'Backing up original state...' : 'Preparing lint-staged...',
+        task: (ctx, task) => git.prepare(ctx, task),
       },
       {
         title: 'Hiding unstaged changes to partially staged files...',
diff --git a/node_modules/lint-staged/lib/searchConfigs.js b/node_modules/lint-staged/lib/searchConfigs.js
index ff8caa0..5fd3dd5 100644
--- a/node_modules/lint-staged/lib/searchConfigs.js
+++ b/node_modules/lint-staged/lib/searchConfigs.js
@@ -106,7 +106,7 @@ export const searchConfigs = async (
   /** Get validated configs from the above object, without any `null` values (not found) */
   const foundConfigs = Object.entries(configs)
     .filter(([, value]) => !!value)
-    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})
+    .reduce((acc, [key, value]) => Object.assign(acc, { [key]: value }), {})
 
   /**
    * Try to find a single config from parent directories
diff --git a/node_modules/lint-staged/lib/state.js b/node_modules/lint-staged/lib/state.js
index 8dce40d..3bdeb90 100644
--- a/node_modules/lint-staged/lib/state.js
+++ b/node_modules/lint-staged/lib/state.js
@@ -2,7 +2,6 @@ import EventEmitter from 'events'
 
 import { GIT_ERROR, TASK_ERROR } from './messages.js'
 import {
-  ApplyEmptyCommitError,
   GitError,
   RestoreOriginalStateError,
   RestoreUnstagedChangesError,
@@ -12,6 +11,7 @@ import {
 export const getInitialState = ({ quiet = false } = {}) => ({
   hasPartiallyStagedFiles: null,
   shouldBackup: null,
+  backupHash: null,
   shouldHidePartiallyStaged: true,
   errors: new Set([]),
   events: new EventEmitter(),
@@ -40,6 +40,7 @@ export const restoreUnstagedChangesSkipped = (ctx) => {
   if (ctx.errors.has(GitError)) {
     return GIT_ERROR
   }
+
   // Should be skipped when tasks fail
   if (ctx.errors.has(TaskError)) {
     return TASK_ERROR
@@ -47,18 +48,11 @@ export const restoreUnstagedChangesSkipped = (ctx) => {
 }
 
 export const restoreOriginalStateEnabled = (ctx) =>
-  ctx.shouldBackup &&
-  (ctx.errors.has(TaskError) ||
-    ctx.errors.has(ApplyEmptyCommitError) ||
-    ctx.errors.has(RestoreUnstagedChangesError))
+  ctx.shouldBackup && (ctx.errors.has(TaskError) || ctx.errors.has(RestoreUnstagedChangesError))
 
 export const restoreOriginalStateSkipped = (ctx) => {
   // Should be skipped in case of unknown git errors
-  if (
-    ctx.errors.has(GitError) &&
-    !ctx.errors.has(ApplyEmptyCommitError) &&
-    !ctx.errors.has(RestoreUnstagedChangesError)
-  ) {
+  if (ctx.errors.has(GitError) && !ctx.errors.has(RestoreUnstagedChangesError)) {
     return GIT_ERROR
   }
 }
@@ -67,13 +61,10 @@ export const cleanupEnabled = (ctx) => ctx.shouldBackup
 
 export const cleanupSkipped = (ctx) => {
   // Should be skipped in case of unknown git errors
-  if (
-    ctx.errors.has(GitError) &&
-    !ctx.errors.has(ApplyEmptyCommitError) &&
-    !ctx.errors.has(RestoreUnstagedChangesError)
-  ) {
+  if (restoreOriginalStateSkipped(ctx)) {
     return GIT_ERROR
   }
+
   // Should be skipped when reverting to original state fails
   if (ctx.errors.has(RestoreOriginalStateError)) {
     return GIT_ERROR
diff --git a/node_modules/lint-staged/lib/validateConfig.js b/node_modules/lint-staged/lib/validateConfig.js
index aca8552..9c39260 100644
--- a/node_modules/lint-staged/lib/validateConfig.js
+++ b/node_modules/lint-staged/lib/validateConfig.js
@@ -87,7 +87,7 @@ export const validateConfigLogic = (config, configPath, logger) => {
      */
     const fixedPattern = validateBraces(pattern, logger)
 
-    return { ...collection, [fixedPattern]: task }
+    return Object.assign(collection, { [fixedPattern]: task })
   }, {})
 
   if (errors.length) {
diff --git a/node_modules/lint-staged/lib/version.js b/node_modules/lint-staged/lib/version.js
new file mode 100644
index 0000000..cd365dd
--- /dev/null
+++ b/node_modules/lint-staged/lib/version.js
@@ -0,0 +1,6 @@
+import fs from 'node:fs/promises'
+
+export const getVersion = async () => {
+  const packageJson = JSON.parse(await fs.readFile(new URL('../package.json', import.meta.url)))
+  return packageJson.version
+}
